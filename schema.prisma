generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider                  = "typegraphql-prisma"
  formatGeneratedCode       = "prettier"
  omitInputFieldsByDefault  = ["createdAt", "updatedAt"]
  omitOutputFieldsByDefault = ["password"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  /// @TypeGraphQL.omit(input: ["create", "update"])
  id         String   @id @default(uuid())
  name       String   @unique
  scopes     String[]
  User       User[]
  /// @TypeGraphQL.omit(input: true)
  persistent Boolean  @default(false)
}

model User {
  /// @TypeGraphQL.omit(input: ["create", "update"])
  id         String  @id @default(uuid())
  email      String  @unique
  password   String
  role       Role    @relation(fields: [roleId], references: [id])
  /// @TypeGraphQL.omit(output: true)
  roleId     String
  /// @TypeGraphQL.omit(output: true, input: true)
  sessionId  String  @unique @default(uuid())
  /// @TypeGraphQL.omit(input: ["create", "update"])
  persistent Boolean @default(false)
}

enum CurrencyCode {
  EUR
}

model Store {
  /// @TypeGraphQL.omit(input: ["create", "update"])
  id           String       @id @default(uuid())
  name         String
  description  String?
  currencyCode CurrencyCode
  collections  Collection[]
  products     Product[]
}

model Collection {
  /// @TypeGraphQL.omit(input: ["create", "update"])
  id          String    @id @default(uuid())
  name        String
  description String?
  /// @TypeGraphQL.omit(output: true)
  storeId     String?
  store       Store?    @relation(fields: [storeId], references: [id])
  products    Product[] @relation("CollectionToProduct")
}

enum ProductStatus {
  Published
  Draft
}

model Product {
  /// @TypeGraphQL.omit(input: ["create", "update"])
  id          String           @id @default(uuid())
  name        String
  description String?
  price       Decimal          @db.Money
  stock       Int
  status      ProductStatus
  /// @TypeGraphQL.omit(output: true)
  storeId     String
  store       Store            @relation(fields: [storeId], references: [id])
  images      ProductImage[]
  variants    ProductVariant[]
  collections Collection[]     @relation("CollectionToProduct")
}

model ProductImage {
  /// @TypeGraphQL.omit(input: ["create", "update"])
  id        String  @id @default(uuid())
  fileId    String
  file      File    @relation(fields: [fileId], references: [id])
  alt       String?
  position  Int
  /// @TypeGraphQL.omit(output: true)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, position])
}

model ProductVariant {
  /// @TypeGraphQL.omit(input: ["create", "update"])
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Decimal @db.Money
  stock       Int
  /// @TypeGraphQL.omit(output: true)
  productId   String
  product     Product @relation(fields: [productId], references: [id])
}

model File {
  id          String         @id @default(uuid())
  bucket      String
  key         String
  contentType String
  images      ProductImage[]

  @@unique(name: "src", [bucket, key])
}
